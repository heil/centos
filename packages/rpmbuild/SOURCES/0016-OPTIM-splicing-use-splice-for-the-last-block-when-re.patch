From fa8e2bc68c583a227ebc78bab5779b84065b28da Mon Sep 17 00:00:00 2001
From: Willy Tarreau <w@1wt.eu>
Date: Thu, 18 Jul 2013 22:21:54 +0200
Subject: [PATCH 16/67] OPTIM: splicing: use splice() for the last block when
 relevant

Splicing is avoided for small transfers because it's generally cheaper
to perform a couple of recv+send calls than pipe+splice+splice. This
has the consequence that the last chunk of a large transfer may be
transferred using recv+send if it's less than 4 kB. But when the pipe
is already set up, it's better to use splice() to read the pending data,
since they will get merged with the pending ones. This is what now
happens everytime the reader is slower than the writer.

Note that this change alone could have fixed most of the CPU hog bug,
except at the end when only the close was pending.
---
 src/stream_interface.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/stream_interface.c b/src/stream_interface.c
index 905612c..33f1d0e 100644
--- a/src/stream_interface.c
+++ b/src/stream_interface.c
@@ -934,7 +934,8 @@ static void si_conn_recv_cb(struct connection *conn)
 	 * using a buffer.
 	 */
 	if (conn->xprt->rcv_pipe &&
-	    chn->to_forward >= MIN_SPLICE_FORWARD && chn->flags & CF_KERN_SPLICING) {
+	    (chn->pipe || chn->to_forward >= MIN_SPLICE_FORWARD) &&
+	    chn->flags & CF_KERN_SPLICING) {
 		if (buffer_not_empty(chn->buf)) {
 			/* We're embarrassed, there are already data pending in
 			 * the buffer and we don't want to have them at two
-- 
1.8.1.5

