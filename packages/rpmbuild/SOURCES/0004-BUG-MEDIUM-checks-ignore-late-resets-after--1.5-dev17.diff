From c5c61fcf453adf396a21308be373f499b7953a05 Mon Sep 17 00:00:00 2001
From: Willy Tarreau <w@1wt.eu>
Date: Sun, 30 Dec 2012 01:44:24 +0100
Subject: BUG/MEDIUM: checks: ignore late resets after valid responses

Reinout Verkerk from Trilex reported an issue with servers recently
flapping after an haproxy upgrade. Haproxy checks a simple agent
returning an HTTP response. The issue is that if the request packet
is lost but the simple agent responds before reading the HTTP request
and closes, the server will emit a TCP RST once the request finally
reaches it.

The way checks have been ported to use connections makes the error
flag show up as a failure after the success, reporting a stupid case
where the server is said to be down with a correct response.

In order to fix this, let's ignore the connection's error flag if a
successful check has already been reported. Reinout could verify that
a patched server did not exhibit the problem anymore.
---
 src/checks.c |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/src/checks.c b/src/checks.c
index 394d29e..6d527a3 100644
--- a/src/checks.c
+++ b/src/checks.c
@@ -1185,7 +1185,8 @@ static int wake_srv_chk(struct connection *conn)
 
 	if (unlikely(conn->flags & CO_FL_ERROR)) {
 		/* Note that we might as well have been woken up by a handshake handler */
-		s->result |= SRV_CHK_FAILED;
+		if (s->result == SRV_CHK_UNKNOWN)
+			s->result |= SRV_CHK_FAILED;
 		__conn_data_stop_both(conn);
 		task_wakeup(s->check.task, TASK_WOKEN_IO);
 	}
-- 
1.7.1

